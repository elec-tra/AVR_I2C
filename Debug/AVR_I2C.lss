
AVR_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000010f8  0000118c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800194  00800194  00001220  2**0
                  ALLOC
  3 .stab         00001920  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f82  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ac2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000046aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000046c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_19>
      50:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ef       	ldi	r30, 0xF8	; 248
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 39       	cpi	r26, 0x94	; 148
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a4 e9       	ldi	r26, 0x94	; 148
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 30       	cpi	r26, 0x0F	; 15
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b5 03 	call	0x76a	; 0x76a <main>
      9e:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Debug_Byte>:
 * _p: pointer to string literal
 *
 * returns: It returns formatted string literal pointer
 */
char * Debug_Byte(uint8_t _register, char * _p)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	65 97       	sbiw	r28, 0x15	; 21
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	8b 8b       	std	Y+19, r24	; 0x13
      bc:	7d 8b       	std	Y+21, r23	; 0x15
      be:	6c 8b       	std	Y+20, r22	; 0x14
	_p = "Hex: 0x00     U_Int: 000     ASCII: 0\0";
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	91 e0       	ldi	r25, 0x01	; 1
      c4:	9d 8b       	std	Y+21, r25	; 0x15
      c6:	8c 8b       	std	Y+20, r24	; 0x14
	//----------Byte to Hex----------//
	const char hex_list[] = "0123456789ABCDEF";
      c8:	81 e1       	ldi	r24, 0x11	; 17
      ca:	e8 e2       	ldi	r30, 0x28	; 40
      cc:	f1 e0       	ldi	r31, 0x01	; 1
      ce:	de 01       	movw	r26, r28
      d0:	12 96       	adiw	r26, 0x02	; 2
      d2:	01 90       	ld	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	8a 95       	dec	r24
      d8:	e1 f7       	brne	.-8      	; 0xd2 <Debug_Byte+0x2c>
	uint8_t temp = _register;
      da:	8b 89       	ldd	r24, Y+19	; 0x13
      dc:	89 83       	std	Y+1, r24	; 0x01
	_p[8] = hex_list[temp % 16];
      de:	8c 89       	ldd	r24, Y+20	; 0x14
      e0:	9d 89       	ldd	r25, Y+21	; 0x15
      e2:	08 96       	adiw	r24, 0x08	; 8
      e4:	29 81       	ldd	r18, Y+1	; 0x01
      e6:	22 2f       	mov	r18, r18
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	2f 70       	andi	r18, 0x0F	; 15
      ec:	33 27       	eor	r19, r19
      ee:	ae 01       	movw	r20, r28
      f0:	4e 5f       	subi	r20, 0xFE	; 254
      f2:	5f 4f       	sbci	r21, 0xFF	; 255
      f4:	24 0f       	add	r18, r20
      f6:	35 1f       	adc	r19, r21
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
	temp = temp / 16;
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	82 95       	swap	r24
     104:	8f 70       	andi	r24, 0x0F	; 15
     106:	89 83       	std	Y+1, r24	; 0x01
	_p[7] = hex_list[temp % 16];
     108:	8c 89       	ldd	r24, Y+20	; 0x14
     10a:	9d 89       	ldd	r25, Y+21	; 0x15
     10c:	07 96       	adiw	r24, 0x07	; 7
     10e:	29 81       	ldd	r18, Y+1	; 0x01
     110:	22 2f       	mov	r18, r18
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	2f 70       	andi	r18, 0x0F	; 15
     116:	33 27       	eor	r19, r19
     118:	ae 01       	movw	r20, r28
     11a:	4e 5f       	subi	r20, 0xFE	; 254
     11c:	5f 4f       	sbci	r21, 0xFF	; 255
     11e:	24 0f       	add	r18, r20
     120:	35 1f       	adc	r19, r21
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18

	//----Byte to Unsigned Integer---//
	temp = _register;
     12a:	8b 89       	ldd	r24, Y+19	; 0x13
     12c:	89 83       	std	Y+1, r24	; 0x01
	_p[23] = hex_list[temp % 10];
     12e:	8c 89       	ldd	r24, Y+20	; 0x14
     130:	9d 89       	ldd	r25, Y+21	; 0x15
     132:	9c 01       	movw	r18, r24
     134:	29 5e       	subi	r18, 0xE9	; 233
     136:	3f 4f       	sbci	r19, 0xFF	; 255
     138:	99 81       	ldd	r25, Y+1	; 0x01
     13a:	8d ec       	ldi	r24, 0xCD	; 205
     13c:	98 9f       	mul	r25, r24
     13e:	81 2d       	mov	r24, r1
     140:	11 24       	eor	r1, r1
     142:	86 95       	lsr	r24
     144:	86 95       	lsr	r24
     146:	86 95       	lsr	r24
     148:	88 0f       	add	r24, r24
     14a:	48 2f       	mov	r20, r24
     14c:	44 0f       	add	r20, r20
     14e:	44 0f       	add	r20, r20
     150:	84 0f       	add	r24, r20
     152:	f9 2f       	mov	r31, r25
     154:	f8 1b       	sub	r31, r24
     156:	8f 2f       	mov	r24, r31
     158:	88 2f       	mov	r24, r24
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	ae 01       	movw	r20, r28
     15e:	4e 5f       	subi	r20, 0xFE	; 254
     160:	5f 4f       	sbci	r21, 0xFF	; 255
     162:	84 0f       	add	r24, r20
     164:	95 1f       	adc	r25, r21
     166:	fc 01       	movw	r30, r24
     168:	80 81       	ld	r24, Z
     16a:	f9 01       	movw	r30, r18
     16c:	80 83       	st	Z, r24
	temp = temp / 10;
     16e:	99 81       	ldd	r25, Y+1	; 0x01
     170:	8d ec       	ldi	r24, 0xCD	; 205
     172:	98 9f       	mul	r25, r24
     174:	81 2d       	mov	r24, r1
     176:	11 24       	eor	r1, r1
     178:	86 95       	lsr	r24
     17a:	86 95       	lsr	r24
     17c:	86 95       	lsr	r24
     17e:	89 83       	std	Y+1, r24	; 0x01
	_p[22] = hex_list[temp % 10];
     180:	8c 89       	ldd	r24, Y+20	; 0x14
     182:	9d 89       	ldd	r25, Y+21	; 0x15
     184:	9c 01       	movw	r18, r24
     186:	2a 5e       	subi	r18, 0xEA	; 234
     188:	3f 4f       	sbci	r19, 0xFF	; 255
     18a:	99 81       	ldd	r25, Y+1	; 0x01
     18c:	8d ec       	ldi	r24, 0xCD	; 205
     18e:	98 9f       	mul	r25, r24
     190:	81 2d       	mov	r24, r1
     192:	11 24       	eor	r1, r1
     194:	86 95       	lsr	r24
     196:	86 95       	lsr	r24
     198:	86 95       	lsr	r24
     19a:	88 0f       	add	r24, r24
     19c:	48 2f       	mov	r20, r24
     19e:	44 0f       	add	r20, r20
     1a0:	44 0f       	add	r20, r20
     1a2:	84 0f       	add	r24, r20
     1a4:	f9 2f       	mov	r31, r25
     1a6:	f8 1b       	sub	r31, r24
     1a8:	8f 2f       	mov	r24, r31
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	ae 01       	movw	r20, r28
     1b0:	4e 5f       	subi	r20, 0xFE	; 254
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	84 0f       	add	r24, r20
     1b6:	95 1f       	adc	r25, r21
     1b8:	fc 01       	movw	r30, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	f9 01       	movw	r30, r18
     1be:	80 83       	st	Z, r24
	temp = temp / 10;
     1c0:	99 81       	ldd	r25, Y+1	; 0x01
     1c2:	8d ec       	ldi	r24, 0xCD	; 205
     1c4:	98 9f       	mul	r25, r24
     1c6:	81 2d       	mov	r24, r1
     1c8:	11 24       	eor	r1, r1
     1ca:	86 95       	lsr	r24
     1cc:	86 95       	lsr	r24
     1ce:	86 95       	lsr	r24
     1d0:	89 83       	std	Y+1, r24	; 0x01
	_p[21] = hex_list[temp % 10];
     1d2:	8c 89       	ldd	r24, Y+20	; 0x14
     1d4:	9d 89       	ldd	r25, Y+21	; 0x15
     1d6:	9c 01       	movw	r18, r24
     1d8:	2b 5e       	subi	r18, 0xEB	; 235
     1da:	3f 4f       	sbci	r19, 0xFF	; 255
     1dc:	99 81       	ldd	r25, Y+1	; 0x01
     1de:	8d ec       	ldi	r24, 0xCD	; 205
     1e0:	98 9f       	mul	r25, r24
     1e2:	81 2d       	mov	r24, r1
     1e4:	11 24       	eor	r1, r1
     1e6:	86 95       	lsr	r24
     1e8:	86 95       	lsr	r24
     1ea:	86 95       	lsr	r24
     1ec:	88 0f       	add	r24, r24
     1ee:	48 2f       	mov	r20, r24
     1f0:	44 0f       	add	r20, r20
     1f2:	44 0f       	add	r20, r20
     1f4:	84 0f       	add	r24, r20
     1f6:	f9 2f       	mov	r31, r25
     1f8:	f8 1b       	sub	r31, r24
     1fa:	8f 2f       	mov	r24, r31
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	ae 01       	movw	r20, r28
     202:	4e 5f       	subi	r20, 0xFE	; 254
     204:	5f 4f       	sbci	r21, 0xFF	; 255
     206:	84 0f       	add	r24, r20
     208:	95 1f       	adc	r25, r21
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	f9 01       	movw	r30, r18
     210:	80 83       	st	Z, r24

	//---------Byte to ASCII---------//
	_p[36] = (unsigned char) _register;
     212:	8c 89       	ldd	r24, Y+20	; 0x14
     214:	9d 89       	ldd	r25, Y+21	; 0x15
     216:	84 96       	adiw	r24, 0x24	; 36
     218:	2b 89       	ldd	r18, Y+19	; 0x13
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18

	return _p;
     21e:	8c 89       	ldd	r24, Y+20	; 0x14
     220:	9d 89       	ldd	r25, Y+21	; 0x15
}
     222:	65 96       	adiw	r28, 0x15	; 21
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <Integer_to_Characters>:
 * _p: pointer to string literal
 *
 * returns: A character pointer pointing to character array.
 */
char * Integer_to_Characters(int integer_value, char * _p)
{
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	63 97       	sbiw	r28, 0x13	; 19
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	99 8b       	std	Y+17, r25	; 0x11
     24e:	88 8b       	std	Y+16, r24	; 0x10
     250:	7b 8b       	std	Y+19, r23	; 0x13
     252:	6a 8b       	std	Y+18, r22	; 0x12
    const char digit_list[] = "0123456789";
     254:	8b e0       	ldi	r24, 0x0B	; 11
     256:	e9 e3       	ldi	r30, 0x39	; 57
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	de 01       	movw	r26, r28
     25c:	15 96       	adiw	r26, 0x05	; 5
     25e:	01 90       	ld	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	8a 95       	dec	r24
     264:	e1 f7       	brne	.-8      	; 0x25e <Integer_to_Characters+0x2a>
    register char * p = _p;
     266:	0a 89       	ldd	r16, Y+18	; 0x12
     268:	1b 89       	ldd	r17, Y+19	; 0x13
    int temp = integer_value;
     26a:	88 89       	ldd	r24, Y+16	; 0x10
     26c:	99 89       	ldd	r25, Y+17	; 0x11
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
    if(temp < 0)
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	99 23       	and	r25, r25
     278:	74 f4       	brge	.+28     	; 0x296 <Integer_to_Characters+0x62>
    {
    	*p++ = '-';
     27a:	c8 01       	movw	r24, r16
     27c:	8c 01       	movw	r16, r24
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	2d e2       	ldi	r18, 0x2D	; 45
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
        temp *= -1;
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	91 95       	neg	r25
     28e:	81 95       	neg	r24
     290:	91 09       	sbc	r25, r1
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
    }
    int _temp = temp;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	9c 83       	std	Y+4, r25	; 0x04
     29c:	8b 83       	std	Y+3, r24	; 0x03
    do{
    	++p;
     29e:	0f 5f       	subi	r16, 0xFF	; 255
     2a0:	1f 4f       	sbci	r17, 0xFF	; 255
        _temp = _temp / 10;
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	2a e0       	ldi	r18, 0x0A	; 10
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	b9 01       	movw	r22, r18
     2ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <__divmodhi4>
     2b0:	cb 01       	movw	r24, r22
     2b2:	9c 83       	std	Y+4, r25	; 0x04
     2b4:	8b 83       	std	Y+3, r24	; 0x03
    }while(_temp);
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	89 2b       	or	r24, r25
     2bc:	81 f7       	brne	.-32     	; 0x29e <Integer_to_Characters+0x6a>
    *p = '\0';
     2be:	f8 01       	movw	r30, r16
     2c0:	10 82       	st	Z, r1
    do{
    	*--p = digit_list[temp % 10];
     2c2:	01 50       	subi	r16, 0x01	; 1
     2c4:	11 09       	sbc	r17, r1
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	2a e0       	ldi	r18, 0x0A	; 10
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	b9 01       	movw	r22, r18
     2d0:	0e 94 37 07 	call	0xe6e	; 0xe6e <__divmodhi4>
     2d4:	9c 01       	movw	r18, r24
     2d6:	ce 01       	movw	r24, r28
     2d8:	05 96       	adiw	r24, 0x05	; 5
     2da:	82 0f       	add	r24, r18
     2dc:	93 1f       	adc	r25, r19
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	f8 01       	movw	r30, r16
     2e4:	80 83       	st	Z, r24
        temp = temp / 10;
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	2a e0       	ldi	r18, 0x0A	; 10
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	b9 01       	movw	r22, r18
     2f0:	0e 94 37 07 	call	0xe6e	; 0xe6e <__divmodhi4>
     2f4:	cb 01       	movw	r24, r22
     2f6:	9a 83       	std	Y+2, r25	; 0x02
     2f8:	89 83       	std	Y+1, r24	; 0x01
    }while(temp);
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	89 2b       	or	r24, r25
     300:	01 f7       	brne	.-64     	; 0x2c2 <Integer_to_Characters+0x8e>

    return _p;
     302:	8a 89       	ldd	r24, Y+18	; 0x12
     304:	9b 89       	ldd	r25, Y+19	; 0x13
}
     306:	63 96       	adiw	r28, 0x13	; 19
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <I2C_Init>:
 * peripheral for Master transmit and receive.
 *
 * returns: It returns nothing.
 */
void I2C_Init()
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
	//-------Set SCl Frequency-------//
	TWBR = (unsigned char) TWBR_value;	/*Pre Scaler*/
     324:	88 eb       	ldi	r24, 0xB8	; 184
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	28 e7       	ldi	r18, 0x78	; 120
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18

	//-----Control Register TWCR-----//
	CLEAR_BIT(TWCR, TWIE);				/*Disable Interrupt*/
     32e:	8c eb       	ldi	r24, 0xBC	; 188
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	2c eb       	ldi	r18, 0xBC	; 188
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	2e 7f       	andi	r18, 0xFE	; 254
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWEN);				/*Disable TWI*/
     340:	8c eb       	ldi	r24, 0xBC	; 188
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2c eb       	ldi	r18, 0xBC	; 188
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	2b 7f       	andi	r18, 0xFB	; 251
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWSTO);				/*No Stop Signal*/
     352:	8c eb       	ldi	r24, 0xBC	; 188
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	2c eb       	ldi	r18, 0xBC	; 188
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	2f 7e       	andi	r18, 0xEF	; 239
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWSTA);				/*No Start Signal*/
     364:	8c eb       	ldi	r24, 0xBC	; 188
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2c eb       	ldi	r18, 0xBC	; 188
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	2f 7d       	andi	r18, 0xDF	; 223
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWEA);				/*Disable Automatic Acknowledge*/
     376:	8c eb       	ldi	r24, 0xBC	; 188
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	2c eb       	ldi	r18, 0xBC	; 188
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	20 81       	ld	r18, Z
     382:	2f 7b       	andi	r18, 0xBF	; 191
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWINT);				/*Ready for New Job*/
     388:	8c eb       	ldi	r24, 0xBC	; 188
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2c eb       	ldi	r18, 0xBC	; 188
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	2f 77       	andi	r18, 0x7F	; 127
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18

	//--------Set Pre-Scaler---------//
	CLEAR_BIT(TWSR, TWPS0);				/*Pre-Scaler is 1*/
     39a:	89 eb       	ldi	r24, 0xB9	; 185
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	29 eb       	ldi	r18, 0xB9	; 185
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	2e 7f       	andi	r18, 0xFE	; 254
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	CLEAR_BIT(TWSR, TWPS1);				/*Pre-Scaler is 1*/
     3ac:	89 eb       	ldi	r24, 0xB9	; 185
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	29 eb       	ldi	r18, 0xB9	; 185
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	2d 7f       	andi	r18, 0xFD	; 253
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18

	//Set I2C Address for Master(MCU)//
	TWAR = 0b11111110;					/*MCU I2C Address*/
     3be:	8a eb       	ldi	r24, 0xBA	; 186
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2e ef       	ldi	r18, 0xFE	; 254
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
	CLEAR_BIT(TWAR, TWGCE);				/*Disable I2C General Call*/
     3c8:	8a eb       	ldi	r24, 0xBA	; 186
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	2a eb       	ldi	r18, 0xBA	; 186
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	2e 7f       	andi	r18, 0xFE	; 254
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18

	//---Set Address Mask Register--//
	TWAMR = 0b00000000;					/*Enable Address comparison for all Bits*/
     3da:	8d eb       	ldi	r24, 0xBD	; 189
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	10 82       	st	Z, r1

	//----------Enable TWI----------//
	SET_BIT(TWCR, TWEN);				/*Enable TWI*/
     3e2:	8c eb       	ldi	r24, 0xBC	; 188
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	2c eb       	ldi	r18, 0xBC	; 188
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	24 60       	ori	r18, 0x04	; 4
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <I2C_Start_Communication>:
 * slave_addr: 7-bit address of target slave
 *
 * returns: It returns nothing.
 */
void I2C_Start_Communication(uint8_t slave_addr)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	89 83       	std	Y+1, r24	; 0x01
	p = i2c_data_buffer;
     408:	8c ef       	ldi	r24, 0xFC	; 252
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <p+0x1>
     410:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <p>

	SET_BIT(TWCR, TWSTA);				/*Give Start Signal*/
     414:	8c eb       	ldi	r24, 0xBC	; 188
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	2c eb       	ldi	r18, 0xBC	; 188
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	20 81       	ld	r18, Z
     420:	20 62       	ori	r18, 0x20	; 32
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
	SET_BIT(TWCR, TWINT);				/*Ready for New Job*/
     426:	8c eb       	ldi	r24, 0xBC	; 188
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2c eb       	ldi	r18, 0xBC	; 188
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	20 68       	ori	r18, 0x80	; 128
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
	slave_address = slave_addr;
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     43e:	00 00       	nop
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <I2C_Do_Communication>:
 * 			Note: "1" means I2C Communication was successful
 * 				  "0" means I2C Communication is not completed
 * 				   yet
 */
uint8_t I2C_Do_Communication()
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	60 97       	sbiw	r28, 0x10	; 16
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	 * So, The following three lines can
	 * be commented if debug is not
	 * needed
	 */
	char * debug_message;
	USART0_Send_Data(Debug_Byte((uint8_t) TWSR, debug_message));
     45c:	89 eb       	ldi	r24, 0xB9	; 185
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	20 81       	ld	r18, Z
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	bc 01       	movw	r22, r24
     46a:	82 2f       	mov	r24, r18
     46c:	0e 94 53 00 	call	0xa6	; 0xa6 <Debug_Byte>
     470:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a0 e8       	ldi	r26, 0x80	; 128
     47a:	b0 e4       	ldi	r27, 0x40	; 64
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	ad 83       	std	Y+5, r26	; 0x05
     482:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	4a e7       	ldi	r20, 0x7A	; 122
     48a:	55 e4       	ldi	r21, 0x45	; 69
     48c:	6b 81       	ldd	r22, Y+3	; 0x03
     48e:	7c 81       	ldd	r23, Y+4	; 0x04
     490:	8d 81       	ldd	r24, Y+5	; 0x05
     492:	9e 81       	ldd	r25, Y+6	; 0x06
     494:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	8f 83       	std	Y+7, r24	; 0x07
     49e:	98 87       	std	Y+8, r25	; 0x08
     4a0:	a9 87       	std	Y+9, r26	; 0x09
     4a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e8       	ldi	r20, 0x80	; 128
     4aa:	5f e3       	ldi	r21, 0x3F	; 63
     4ac:	6f 81       	ldd	r22, Y+7	; 0x07
     4ae:	78 85       	ldd	r23, Y+8	; 0x08
     4b0:	89 85       	ldd	r24, Y+9	; 0x09
     4b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b4:	0e 94 5f 07 	call	0xebe	; 0xebe <__cmpsf2>
     4b8:	88 23       	and	r24, r24
     4ba:	2c f4       	brge	.+10     	; 0x4c6 <I2C_Do_Communication+0x7e>
		__ticks = 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9c 87       	std	Y+12, r25	; 0x0c
     4c2:	8b 87       	std	Y+11, r24	; 0x0b
     4c4:	3f c0       	rjmp	.+126    	; 0x544 <I2C_Do_Communication+0xfc>
	else if (__tmp > 65535)
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	3f ef       	ldi	r19, 0xFF	; 255
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	57 e4       	ldi	r21, 0x47	; 71
     4ce:	6f 81       	ldd	r22, Y+7	; 0x07
     4d0:	78 85       	ldd	r23, Y+8	; 0x08
     4d2:	89 85       	ldd	r24, Y+9	; 0x09
     4d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	4c f5       	brge	.+82     	; 0x530 <I2C_Do_Communication+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e2       	ldi	r20, 0x20	; 32
     4e4:	51 e4       	ldi	r21, 0x41	; 65
     4e6:	6b 81       	ldd	r22, Y+3	; 0x03
     4e8:	7c 81       	ldd	r23, Y+4	; 0x04
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	9e 81       	ldd	r25, Y+6	; 0x06
     4ee:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     4f2:	dc 01       	movw	r26, r24
     4f4:	cb 01       	movw	r24, r22
     4f6:	bc 01       	movw	r22, r24
     4f8:	cd 01       	movw	r24, r26
     4fa:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	9c 87       	std	Y+12, r25	; 0x0c
     504:	8b 87       	std	Y+11, r24	; 0x0b
     506:	0f c0       	rjmp	.+30     	; 0x526 <I2C_Do_Communication+0xde>
     508:	80 e9       	ldi	r24, 0x90	; 144
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9e 87       	std	Y+14, r25	; 0x0e
     50e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     510:	8d 85       	ldd	r24, Y+13	; 0x0d
     512:	9e 85       	ldd	r25, Y+14	; 0x0e
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <I2C_Do_Communication+0xcc>
     518:	9e 87       	std	Y+14, r25	; 0x0e
     51a:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51c:	8b 85       	ldd	r24, Y+11	; 0x0b
     51e:	9c 85       	ldd	r25, Y+12	; 0x0c
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	8b 85       	ldd	r24, Y+11	; 0x0b
     528:	9c 85       	ldd	r25, Y+12	; 0x0c
     52a:	89 2b       	or	r24, r25
     52c:	69 f7       	brne	.-38     	; 0x508 <I2C_Do_Communication+0xc0>
     52e:	14 c0       	rjmp	.+40     	; 0x558 <I2C_Do_Communication+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     530:	6f 81       	ldd	r22, Y+7	; 0x07
     532:	78 85       	ldd	r23, Y+8	; 0x08
     534:	89 85       	ldd	r24, Y+9	; 0x09
     536:	9a 85       	ldd	r25, Y+10	; 0x0a
     538:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9c 87       	std	Y+12, r25	; 0x0c
     542:	8b 87       	std	Y+11, r24	; 0x0b
     544:	8b 85       	ldd	r24, Y+11	; 0x0b
     546:	9c 85       	ldd	r25, Y+12	; 0x0c
     548:	98 8b       	std	Y+16, r25	; 0x10
     54a:	8f 87       	std	Y+15, r24	; 0x0f
     54c:	8f 85       	ldd	r24, Y+15	; 0x0f
     54e:	98 89       	ldd	r25, Y+16	; 0x10
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <I2C_Do_Communication+0x108>
     554:	98 8b       	std	Y+16, r25	; 0x10
     556:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4);

	//-------Mater Transmitter------//
	if(TWSR == 0x08)					/*Start Signal Sent Successfully*/
     558:	89 eb       	ldi	r24, 0xB9	; 185
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	fc 01       	movw	r30, r24
     55e:	80 81       	ld	r24, Z
     560:	88 30       	cpi	r24, 0x08	; 8
     562:	a1 f4       	brne	.+40     	; 0x58c <I2C_Do_Communication+0x144>
		 * The following line(USART0_Send_
		 * Data("Step 1");) is just for
		 * checking status of I2C.It can
		 * be if debug is not needed
		 */
		USART0_Send_Data("Step 1");
     564:	84 e4       	ldi	r24, 0x44	; 68
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		TWDR = WRITE_OPERATION(slave_address);
     56c:	8b eb       	ldi	r24, 0xBB	; 187
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     574:	22 0f       	add	r18, r18
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
										/*Configure the slave for writing into slave*/
		CLEAR_BIT(TWCR, TWSTA);			/*No more Start Signal needed*/
     57a:	8c eb       	ldi	r24, 0xBC	; 188
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	2c eb       	ldi	r18, 0xBC	; 188
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	2f 7d       	andi	r18, 0xDF	; 223
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
	}
	if(TWSR == 0x18)					/*SLA+W has been transmitted Successfully*/
     58c:	89 eb       	ldi	r24, 0xB9	; 185
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 31       	cpi	r24, 0x18	; 24
     596:	41 f4       	brne	.+16     	; 0x5a8 <I2C_Do_Communication+0x160>
	{
		USART0_Send_Data("Step 2");
     598:	8b e4       	ldi	r24, 0x4B	; 75
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		TWDR = 0x00;					/*Set Slave Address pointer to address 0x00*/
     5a0:	8b eb       	ldi	r24, 0xBB	; 187
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	10 82       	st	Z, r1
	}
	if(TWSR == 0x28)					/*Data  byte  has  been  transmitted Successfully*/
     5a8:	89 eb       	ldi	r24, 0xB9	; 185
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	88 32       	cpi	r24, 0x28	; 40
     5b2:	69 f4       	brne	.+26     	; 0x5ce <I2C_Do_Communication+0x186>
	{
		USART0_Send_Data("Step 3");
     5b4:	82 e5       	ldi	r24, 0x52	; 82
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		SET_BIT(TWCR, TWSTA);			/*Give Repeated Start Signal*/
     5bc:	8c eb       	ldi	r24, 0xBC	; 188
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2c eb       	ldi	r18, 0xBC	; 188
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	20 62       	ori	r18, 0x20	; 32
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
	}
	if(TWSR == 0x10)					/*Repeated Start Signal sent Successfully*/
     5ce:	89 eb       	ldi	r24, 0xB9	; 185
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	80 31       	cpi	r24, 0x10	; 16
     5d8:	c1 f4       	brne	.+48     	; 0x60a <I2C_Do_Communication+0x1c2>
	{
		USART0_Send_Data("Step 4");
     5da:	89 e5       	ldi	r24, 0x59	; 89
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		TWDR = READ_OPERATION(slave_address);
     5e2:	8b eb       	ldi	r24, 0xBB	; 187
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5ea:	22 2f       	mov	r18, r18
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	22 0f       	add	r18, r18
     5f0:	33 1f       	adc	r19, r19
     5f2:	21 60       	ori	r18, 0x01	; 1
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
										/*Configure the slave for reading from slave*/
		CLEAR_BIT(TWCR, TWSTA);			/*No more Start Signal needed*/
     5f8:	8c eb       	ldi	r24, 0xBC	; 188
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	2c eb       	ldi	r18, 0xBC	; 188
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	2f 7d       	andi	r18, 0xDF	; 223
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
	}

	//--------Mater Receiver--------//
	if(TWSR == 0x40)					/*Slave configure as transmitter successfully*/
     60a:	89 eb       	ldi	r24, 0xB9	; 185
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	80 34       	cpi	r24, 0x40	; 64
     614:	69 f4       	brne	.+26     	; 0x630 <I2C_Do_Communication+0x1e8>
	{
		USART0_Send_Data("Step 5");
     616:	80 e6       	ldi	r24, 0x60	; 96
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		SET_BIT(TWCR, TWEA);			/*Enable Acknowledge for upcomming data*/
     61e:	8c eb       	ldi	r24, 0xBC	; 188
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2c eb       	ldi	r18, 0xBC	; 188
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 64       	ori	r18, 0x40	; 64
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
	}
	if(TWSR == 0x50)					/*Slave started transmitting data bytes*/
     630:	89 eb       	ldi	r24, 0xB9	; 185
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	80 81       	ld	r24, Z
     638:	80 35       	cpi	r24, 0x50	; 80
     63a:	09 f0       	breq	.+2      	; 0x63e <I2C_Do_Communication+0x1f6>
     63c:	4e c0       	rjmp	.+156    	; 0x6da <I2C_Do_Communication+0x292>
	{
		if((p - i2c_data_buffer) <= 16)	/*Receive all bytes except last byte - with acknowledgement*/
     63e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <p>
     642:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <p+0x1>
     646:	9c 01       	movw	r18, r24
     648:	8c ef       	ldi	r24, 0xFC	; 252
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	a9 01       	movw	r20, r18
     64e:	48 1b       	sub	r20, r24
     650:	59 0b       	sbc	r21, r25
     652:	ca 01       	movw	r24, r20
     654:	41 97       	sbiw	r24, 0x11	; 17
     656:	b4 f4       	brge	.+44     	; 0x684 <I2C_Do_Communication+0x23c>
		{
			USART0_Send_Data("Step 6");
     658:	87 e6       	ldi	r24, 0x67	; 103
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

			*p++ = TWDR;				/*Store received bytes to buffer*/
     660:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <p>
     664:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <p+0x1>
     668:	9c 01       	movw	r18, r24
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <p+0x1>
     672:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <p>
     676:	2b eb       	ldi	r18, 0xBB	; 187
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
     682:	2b c0       	rjmp	.+86     	; 0x6da <I2C_Do_Communication+0x292>
		}
		else if((p - i2c_data_buffer) == 17)
     684:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <p>
     688:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <p+0x1>
     68c:	9c 01       	movw	r18, r24
     68e:	8c ef       	ldi	r24, 0xFC	; 252
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	a9 01       	movw	r20, r18
     694:	48 1b       	sub	r20, r24
     696:	59 0b       	sbc	r21, r25
     698:	ca 01       	movw	r24, r20
     69a:	41 97       	sbiw	r24, 0x11	; 17
     69c:	f1 f4       	brne	.+60     	; 0x6da <I2C_Do_Communication+0x292>
										/*Receive last byte - without acknowledgement*/
		{
			USART0_Send_Data("Step 7");
     69e:	8e e6       	ldi	r24, 0x6E	; 110
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

			CLEAR_BIT(TWCR, TWEA);		/*Send Not Acknowledge - To stop slave Data transmit*/
     6a6:	8c eb       	ldi	r24, 0xBC	; 188
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2c eb       	ldi	r18, 0xBC	; 188
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	2f 7b       	andi	r18, 0xBF	; 191
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
			*p++ = TWDR;				/*Store last byte*/
     6b8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <p>
     6bc:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <p+0x1>
     6c0:	9c 01       	movw	r18, r24
     6c2:	2f 5f       	subi	r18, 0xFF	; 255
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <p+0x1>
     6ca:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <p>
     6ce:	2b eb       	ldi	r18, 0xBB	; 187
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
		}
	}
	if(TWSR == 0x58)
     6da:	89 eb       	ldi	r24, 0xB9	; 185
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	fc 01       	movw	r30, r24
     6e0:	80 81       	ld	r24, Z
     6e2:	88 35       	cpi	r24, 0x58	; 88
     6e4:	f1 f4       	brne	.+60     	; 0x722 <I2C_Do_Communication+0x2da>
	{
		USART0_Send_Data("Step 8");
     6e6:	85 e7       	ldi	r24, 0x75	; 117
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>

		*p = '\0';						/*Terminate buffer with null character*/
     6ee:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <p>
     6f2:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <p+0x1>
     6f6:	fc 01       	movw	r30, r24
     6f8:	10 82       	st	Z, r1
		SET_BIT(TWCR, TWSTO);			/*Send Stop Signal*/
     6fa:	8c eb       	ldi	r24, 0xBC	; 188
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	2c eb       	ldi	r18, 0xBC	; 188
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	20 61       	ori	r18, 0x10	; 16
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
		SET_BIT(TWCR, TWINT);			/*Continue the Job*/
     70c:	8c eb       	ldi	r24, 0xBC	; 188
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	2c eb       	ldi	r18, 0xBC	; 188
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	20 68       	ori	r18, 0x80	; 128
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
		return 1;						/*"1" means I2C Communication was successful*/
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0a c0       	rjmp	.+20     	; 0x736 <I2C_Do_Communication+0x2ee>
	}

	SET_BIT(TWCR, TWINT);				/*Continue the Job*/
     722:	8c eb       	ldi	r24, 0xBC	; 188
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2c eb       	ldi	r18, 0xBC	; 188
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	20 68       	ori	r18, 0x80	; 128
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
	return 0;							/*"0" means I2C Communication is not completed yet*/
     734:	80 e0       	ldi	r24, 0x00	; 0
}
     736:	60 96       	adiw	r28, 0x10	; 16
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <I2C_Stop_Communication>:
 * It disable TWI peripheral
 *
 * returns: It returns nothing.
 */
void I2C_Stop_Communication()
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
	//----------Disable TWI----------//
	CLEAR_BIT(TWCR, TWEN);				/*Disable TWI*/
     750:	8c eb       	ldi	r24, 0xBC	; 188
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	2c eb       	ldi	r18, 0xBC	; 188
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	2b 7f       	andi	r18, 0xFB	; 251
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
}
     762:	00 00       	nop
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <main>:

/*I2C Example - DS3231*/
void Print_Seconds();

int main(void)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	aa 97       	sbiw	r28, 0x2a	; 42
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
	//-------------Inits-------------//
	/*POWER MANAGEMENT*/
	DISABLE_ADC; ENABLE_I2C;			/*Disable ADC*/ /*ENABLE I2C*/
     77e:	84 e6       	ldi	r24, 0x64	; 100
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	24 e6       	ldi	r18, 0x64	; 100
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	21 60       	ori	r18, 0x01	; 1
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
     790:	84 e6       	ldi	r24, 0x64	; 100
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	24 e6       	ldi	r18, 0x64	; 100
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	20 81       	ld	r18, Z
     79c:	2f 77       	andi	r18, 0x7F	; 127
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
	DISABLE_SPI; DISABLE_TIMER0;		/*Disable SPI*/ /*DISABLE TIMER0*/
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	24 e6       	ldi	r18, 0x64	; 100
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	f9 01       	movw	r30, r18
     7ac:	20 81       	ld	r18, Z
     7ae:	24 60       	ori	r18, 0x04	; 4
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
     7b4:	84 e6       	ldi	r24, 0x64	; 100
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	24 e6       	ldi	r18, 0x64	; 100
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	20 62       	ori	r18, 0x20	; 32
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
	DISABLE_TIMER1; DISABLE_TIMER2;		/*Disable TIMER1*/ /*DISABLE TIMER2*/
     7c6:	84 e6       	ldi	r24, 0x64	; 100
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	24 e6       	ldi	r18, 0x64	; 100
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	28 60       	ori	r18, 0x08	; 8
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
     7d8:	84 e6       	ldi	r24, 0x64	; 100
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	24 e6       	ldi	r18, 0x64	; 100
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	20 64       	ori	r18, 0x40	; 64
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
	ENABLE_USART0;						/*Enable USART0*/
     7ea:	84 e6       	ldi	r24, 0x64	; 100
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	24 e6       	ldi	r18, 0x64	; 100
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	2d 7f       	andi	r18, 0xFD	; 253
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
	/*GPIO*/
	SET_BIT(DDRB, PB5);					/*Pin PB5 as Output*/
     7fc:	84 e2       	ldi	r24, 0x24	; 36
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	24 e2       	ldi	r18, 0x24	; 36
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	20 62       	ori	r18, 0x20	; 32
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
	CLEAR_BIT(PORTB, PB5);				/*Clear PB5 Bit*/
     80e:	85 e2       	ldi	r24, 0x25	; 37
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	25 e2       	ldi	r18, 0x25	; 37
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	2f 7d       	andi	r18, 0xDF	; 223
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
	/*UART0*/
	USART0_Init(MYUBRR);
     820:	87 e0       	ldi	r24, 0x07	; 7
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART0_Init>
	/*I2C*/
	I2C_Init();
     828:	0e 94 8e 01 	call	0x31c	; 0x31c <I2C_Init>
	/*Interrupt*/
	SET_BIT(SREG, 7);					/*Enable Interrupt*/
     82c:	8f e5       	ldi	r24, 0x5F	; 95
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	2f e5       	ldi	r18, 0x5F	; 95
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	f9 01       	movw	r30, r18
     836:	20 81       	ld	r18, Z
     838:	20 68       	ori	r18, 0x80	; 128
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18

	/*USART0 Transmit Example*/
	USART0_Send_Data("Serial Test Message...");
     83e:	8c e7       	ldi	r24, 0x7C	; 124
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 ea       	ldi	r26, 0xA0	; 160
     84c:	b0 e4       	ldi	r27, 0x40	; 64
     84e:	89 87       	std	Y+9, r24	; 0x09
     850:	9a 87       	std	Y+10, r25	; 0x0a
     852:	ab 87       	std	Y+11, r26	; 0x0b
     854:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	4a e7       	ldi	r20, 0x7A	; 122
     85c:	55 e4       	ldi	r21, 0x45	; 69
     85e:	69 85       	ldd	r22, Y+9	; 0x09
     860:	7a 85       	ldd	r23, Y+10	; 0x0a
     862:	8b 85       	ldd	r24, Y+11	; 0x0b
     864:	9c 85       	ldd	r25, Y+12	; 0x0c
     866:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	8d 87       	std	Y+13, r24	; 0x0d
     870:	9e 87       	std	Y+14, r25	; 0x0e
     872:	af 87       	std	Y+15, r26	; 0x0f
     874:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e8       	ldi	r20, 0x80	; 128
     87c:	5f e3       	ldi	r21, 0x3F	; 63
     87e:	6d 85       	ldd	r22, Y+13	; 0x0d
     880:	7e 85       	ldd	r23, Y+14	; 0x0e
     882:	8f 85       	ldd	r24, Y+15	; 0x0f
     884:	98 89       	ldd	r25, Y+16	; 0x10
     886:	0e 94 5f 07 	call	0xebe	; 0xebe <__cmpsf2>
     88a:	88 23       	and	r24, r24
     88c:	2c f4       	brge	.+10     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
		__ticks = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9a 8b       	std	Y+18, r25	; 0x12
     894:	89 8b       	std	Y+17, r24	; 0x11
     896:	3f c0       	rjmp	.+126    	; 0x916 <__stack+0x17>
	else if (__tmp > 65535)
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f e7       	ldi	r20, 0x7F	; 127
     89e:	57 e4       	ldi	r21, 0x47	; 71
     8a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     8a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     8a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a6:	98 89       	ldd	r25, Y+16	; 0x10
     8a8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__gesf2>
     8ac:	18 16       	cp	r1, r24
     8ae:	4c f5       	brge	.+82     	; 0x902 <__stack+0x3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e2       	ldi	r20, 0x20	; 32
     8b6:	51 e4       	ldi	r21, 0x41	; 65
     8b8:	69 85       	ldd	r22, Y+9	; 0x09
     8ba:	7a 85       	ldd	r23, Y+10	; 0x0a
     8bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8be:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c0:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	9a 8b       	std	Y+18, r25	; 0x12
     8d6:	89 8b       	std	Y+17, r24	; 0x11
     8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8da:	80 e9       	ldi	r24, 0x90	; 144
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	9c 8b       	std	Y+20, r25	; 0x14
     8e0:	8b 8b       	std	Y+19, r24	; 0x13
     8e2:	8b 89       	ldd	r24, Y+19	; 0x13
     8e4:	9c 89       	ldd	r25, Y+20	; 0x14
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
     8ea:	9c 8b       	std	Y+20, r25	; 0x14
     8ec:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ee:	89 89       	ldd	r24, Y+17	; 0x11
     8f0:	9a 89       	ldd	r25, Y+18	; 0x12
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	9a 8b       	std	Y+18, r25	; 0x12
     8f6:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f8:	89 89       	ldd	r24, Y+17	; 0x11
     8fa:	9a 89       	ldd	r25, Y+18	; 0x12
     8fc:	89 2b       	or	r24, r25
     8fe:	69 f7       	brne	.-38     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     900:	14 c0       	rjmp	.+40     	; 0x92a <__stack+0x2b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     902:	6d 85       	ldd	r22, Y+13	; 0x0d
     904:	7e 85       	ldd	r23, Y+14	; 0x0e
     906:	8f 85       	ldd	r24, Y+15	; 0x0f
     908:	98 89       	ldd	r25, Y+16	; 0x10
     90a:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	9a 8b       	std	Y+18, r25	; 0x12
     914:	89 8b       	std	Y+17, r24	; 0x11
     916:	89 89       	ldd	r24, Y+17	; 0x11
     918:	9a 89       	ldd	r25, Y+18	; 0x12
     91a:	9e 8b       	std	Y+22, r25	; 0x16
     91c:	8d 8b       	std	Y+21, r24	; 0x15
     91e:	8d 89       	ldd	r24, Y+21	; 0x15
     920:	9e 89       	ldd	r25, Y+22	; 0x16
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <__stack+0x23>
     926:	9e 8b       	std	Y+22, r25	; 0x16
     928:	8d 8b       	std	Y+21, r24	; 0x15
	_delay_ms(5);

	/*Start I2C for first time*/
	I2C_Start_Communication(SLAVE_ADDRESS);
     92a:	88 e6       	ldi	r24, 0x68	; 104
     92c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Start_Communication>

	//-----------Event loop----------//
	while (1)
	{
		/*Blink LED Example*/
		TOGGLE_BIT(PORTB, PB5);
     930:	85 e2       	ldi	r24, 0x25	; 37
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	25 e2       	ldi	r18, 0x25	; 37
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	30 81       	ld	r19, Z
     93c:	20 e2       	ldi	r18, 0x20	; 32
     93e:	23 27       	eor	r18, r19
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a8 e4       	ldi	r26, 0x48	; 72
     94a:	b2 e4       	ldi	r27, 0x42	; 66
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	9a 83       	std	Y+2, r25	; 0x02
     950:	ab 83       	std	Y+3, r26	; 0x03
     952:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	4a e7       	ldi	r20, 0x7A	; 122
     95a:	55 e4       	ldi	r21, 0x45	; 69
     95c:	69 81       	ldd	r22, Y+1	; 0x01
     95e:	7a 81       	ldd	r23, Y+2	; 0x02
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	8f 8b       	std	Y+23, r24	; 0x17
     96e:	98 8f       	std	Y+24, r25	; 0x18
     970:	a9 8f       	std	Y+25, r26	; 0x19
     972:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e8       	ldi	r20, 0x80	; 128
     97a:	5f e3       	ldi	r21, 0x3F	; 63
     97c:	6f 89       	ldd	r22, Y+23	; 0x17
     97e:	78 8d       	ldd	r23, Y+24	; 0x18
     980:	89 8d       	ldd	r24, Y+25	; 0x19
     982:	9a 8d       	ldd	r25, Y+26	; 0x1a
     984:	0e 94 5f 07 	call	0xebe	; 0xebe <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	2c f4       	brge	.+10     	; 0x996 <__stack+0x97>
		__ticks = 1;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9c 8f       	std	Y+28, r25	; 0x1c
     992:	8b 8f       	std	Y+27, r24	; 0x1b
     994:	3f c0       	rjmp	.+126    	; 0xa14 <__stack+0x115>
	else if (__tmp > 65535)
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	3f ef       	ldi	r19, 0xFF	; 255
     99a:	4f e7       	ldi	r20, 0x7F	; 127
     99c:	57 e4       	ldi	r21, 0x47	; 71
     99e:	6f 89       	ldd	r22, Y+23	; 0x17
     9a0:	78 8d       	ldd	r23, Y+24	; 0x18
     9a2:	89 8d       	ldd	r24, Y+25	; 0x19
     9a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9a6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__gesf2>
     9aa:	18 16       	cp	r1, r24
     9ac:	4c f5       	brge	.+82     	; 0xa00 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e2       	ldi	r20, 0x20	; 32
     9b4:	51 e4       	ldi	r21, 0x41	; 65
     9b6:	69 81       	ldd	r22, Y+1	; 0x01
     9b8:	7a 81       	ldd	r23, Y+2	; 0x02
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	9c 8f       	std	Y+28, r25	; 0x1c
     9d4:	8b 8f       	std	Y+27, r24	; 0x1b
     9d6:	0f c0       	rjmp	.+30     	; 0x9f6 <__stack+0xf7>
     9d8:	80 e9       	ldi	r24, 0x90	; 144
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9e 8f       	std	Y+30, r25	; 0x1e
     9de:	8d 8f       	std	Y+29, r24	; 0x1d
     9e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <__stack+0xe5>
     9e8:	9e 8f       	std	Y+30, r25	; 0x1e
     9ea:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	9c 8f       	std	Y+28, r25	; 0x1c
     9f4:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fa:	89 2b       	or	r24, r25
     9fc:	69 f7       	brne	.-38     	; 0x9d8 <__stack+0xd9>
     9fe:	14 c0       	rjmp	.+40     	; 0xa28 <__stack+0x129>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a00:	6f 89       	ldd	r22, Y+23	; 0x17
     a02:	78 8d       	ldd	r23, Y+24	; 0x18
     a04:	89 8d       	ldd	r24, Y+25	; 0x19
     a06:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a08:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	9c 8f       	std	Y+28, r25	; 0x1c
     a12:	8b 8f       	std	Y+27, r24	; 0x1b
     a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a18:	98 a3       	std	Y+32, r25	; 0x20
     a1a:	8f 8f       	std	Y+31, r24	; 0x1f
     a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a1e:	98 a1       	ldd	r25, Y+32	; 0x20
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <__stack+0x121>
     a24:	98 a3       	std	Y+32, r25	; 0x20
     a26:	8f 8f       	std	Y+31, r24	; 0x1f

		_delay_ms(50);

		if(TWCR & (1 << TWINT))
     a28:	8c eb       	ldi	r24, 0xBC	; 188
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	88 23       	and	r24, r24
     a32:	0c f0       	brlt	.+2      	; 0xa36 <__stack+0x137>
     a34:	7d cf       	rjmp	.-262    	; 0x930 <__stack+0x31>
		{
			if(I2C_Do_Communication() == I2C_COMPLETED)
     a36:	0e 94 24 02 	call	0x448	; 0x448 <I2C_Do_Communication>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__stack+0x141>
     a3e:	78 cf       	rjmp	.-272    	; 0x930 <__stack+0x31>
			{
				I2C_Start_Communication(SLAVE_ADDRESS);
     a40:	88 e6       	ldi	r24, 0x68	; 104
     a42:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2C_Start_Communication>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	a0 e8       	ldi	r26, 0x80	; 128
     a4c:	bf e3       	ldi	r27, 0x3F	; 63
     a4e:	8d 83       	std	Y+5, r24	; 0x05
     a50:	9e 83       	std	Y+6, r25	; 0x06
     a52:	af 83       	std	Y+7, r26	; 0x07
     a54:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	4a e7       	ldi	r20, 0x7A	; 122
     a5c:	55 e4       	ldi	r21, 0x45	; 69
     a5e:	6d 81       	ldd	r22, Y+5	; 0x05
     a60:	7e 81       	ldd	r23, Y+6	; 0x06
     a62:	8f 81       	ldd	r24, Y+7	; 0x07
     a64:	98 85       	ldd	r25, Y+8	; 0x08
     a66:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	89 a3       	std	Y+33, r24	; 0x21
     a70:	9a a3       	std	Y+34, r25	; 0x22
     a72:	ab a3       	std	Y+35, r26	; 0x23
     a74:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	5f e3       	ldi	r21, 0x3F	; 63
     a7e:	69 a1       	ldd	r22, Y+33	; 0x21
     a80:	7a a1       	ldd	r23, Y+34	; 0x22
     a82:	8b a1       	ldd	r24, Y+35	; 0x23
     a84:	9c a1       	ldd	r25, Y+36	; 0x24
     a86:	0e 94 5f 07 	call	0xebe	; 0xebe <__cmpsf2>
     a8a:	88 23       	and	r24, r24
     a8c:	2c f4       	brge	.+10     	; 0xa98 <__stack+0x199>
		__ticks = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	9e a3       	std	Y+38, r25	; 0x26
     a94:	8d a3       	std	Y+37, r24	; 0x25
     a96:	3f c0       	rjmp	.+126    	; 0xb16 <__stack+0x217>
	else if (__tmp > 65535)
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	3f ef       	ldi	r19, 0xFF	; 255
     a9c:	4f e7       	ldi	r20, 0x7F	; 127
     a9e:	57 e4       	ldi	r21, 0x47	; 71
     aa0:	69 a1       	ldd	r22, Y+33	; 0x21
     aa2:	7a a1       	ldd	r23, Y+34	; 0x22
     aa4:	8b a1       	ldd	r24, Y+35	; 0x23
     aa6:	9c a1       	ldd	r25, Y+36	; 0x24
     aa8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__gesf2>
     aac:	18 16       	cp	r1, r24
     aae:	4c f5       	brge	.+82     	; 0xb02 <__stack+0x203>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e2       	ldi	r20, 0x20	; 32
     ab6:	51 e4       	ldi	r21, 0x41	; 65
     ab8:	6d 81       	ldd	r22, Y+5	; 0x05
     aba:	7e 81       	ldd	r23, Y+6	; 0x06
     abc:	8f 81       	ldd	r24, Y+7	; 0x07
     abe:	98 85       	ldd	r25, Y+8	; 0x08
     ac0:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	bc 01       	movw	r22, r24
     aca:	cd 01       	movw	r24, r26
     acc:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	9e a3       	std	Y+38, r25	; 0x26
     ad6:	8d a3       	std	Y+37, r24	; 0x25
     ad8:	0f c0       	rjmp	.+30     	; 0xaf8 <__stack+0x1f9>
     ada:	80 e9       	ldi	r24, 0x90	; 144
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	98 a7       	std	Y+40, r25	; 0x28
     ae0:	8f a3       	std	Y+39, r24	; 0x27
     ae2:	8f a1       	ldd	r24, Y+39	; 0x27
     ae4:	98 a5       	ldd	r25, Y+40	; 0x28
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <__stack+0x1e7>
     aea:	98 a7       	std	Y+40, r25	; 0x28
     aec:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aee:	8d a1       	ldd	r24, Y+37	; 0x25
     af0:	9e a1       	ldd	r25, Y+38	; 0x26
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	9e a3       	std	Y+38, r25	; 0x26
     af6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af8:	8d a1       	ldd	r24, Y+37	; 0x25
     afa:	9e a1       	ldd	r25, Y+38	; 0x26
     afc:	89 2b       	or	r24, r25
     afe:	69 f7       	brne	.-38     	; 0xada <__stack+0x1db>
     b00:	14 c0       	rjmp	.+40     	; 0xb2a <__stack+0x22b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b02:	69 a1       	ldd	r22, Y+33	; 0x21
     b04:	7a a1       	ldd	r23, Y+34	; 0x22
     b06:	8b a1       	ldd	r24, Y+35	; 0x23
     b08:	9c a1       	ldd	r25, Y+36	; 0x24
     b0a:	0e 94 64 07 	call	0xec8	; 0xec8 <__fixunssfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	9e a3       	std	Y+38, r25	; 0x26
     b14:	8d a3       	std	Y+37, r24	; 0x25
     b16:	8d a1       	ldd	r24, Y+37	; 0x25
     b18:	9e a1       	ldd	r25, Y+38	; 0x26
     b1a:	9a a7       	std	Y+42, r25	; 0x2a
     b1c:	89 a7       	std	Y+41, r24	; 0x29
     b1e:	89 a5       	ldd	r24, Y+41	; 0x29
     b20:	9a a5       	ldd	r25, Y+42	; 0x2a
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <__stack+0x223>
     b26:	9a a7       	std	Y+42, r25	; 0x2a
     b28:	89 a7       	std	Y+41, r24	; 0x29

				/*Print Seconds Example - DS3231*/
				_delay_ms(1);			/*Just for USART0 complete its previous message*/
				Print_Seconds();
     b2a:	0e 94 98 05 	call	0xb30	; 0xb30 <Print_Seconds>
			}
			else
				;//Till not completed, so, wait
		}
	}
     b2e:	00 cf       	rjmp	.-512    	; 0x930 <__stack+0x31>

00000b30 <Print_Seconds>:
	return(0);
}

void Print_Seconds()
{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	00 d0       	rcall	.+0      	; 0xb36 <Print_Seconds+0x6>
     b36:	00 d0       	rcall	.+0      	; 0xb38 <Print_Seconds+0x8>
     b38:	00 d0       	rcall	.+0      	; 0xb3a <Print_Seconds+0xa>
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	char seconds[3];
	char string_pointer[3];
	//BCD to Integer conversion
	Integer_to_Characters((uint8_t) (i2c_data_buffer[0] >> 4), string_pointer);
     b3e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <i2c_data_buffer>
     b42:	82 95       	swap	r24
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9e 01       	movw	r18, r28
     b4c:	2c 5f       	subi	r18, 0xFC	; 252
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	b9 01       	movw	r22, r18
     b52:	0e 94 1a 01 	call	0x234	; 0x234 <Integer_to_Characters>
	seconds[0] = string_pointer[0];
     b56:	8c 81       	ldd	r24, Y+4	; 0x04
     b58:	89 83       	std	Y+1, r24	; 0x01
	//BCD to Integer conversion
	Integer_to_Characters((uint8_t) (i2c_data_buffer[0] & 0b00001111), string_pointer);
     b5a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <i2c_data_buffer>
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	99 27       	eor	r25, r25
     b66:	9e 01       	movw	r18, r28
     b68:	2c 5f       	subi	r18, 0xFC	; 252
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	b9 01       	movw	r22, r18
     b6e:	0e 94 1a 01 	call	0x234	; 0x234 <Integer_to_Characters>
	seconds[1] = string_pointer[0];
     b72:	8c 81       	ldd	r24, Y+4	; 0x04
     b74:	8a 83       	std	Y+2, r24	; 0x02
	seconds[2] = '\0';
     b76:	1b 82       	std	Y+3, r1	; 0x03

	USART0_Send_Data(seconds);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 86 06 	call	0xd0c	; 0xd0c <USART0_Send_Data>
}
     b80:	00 00       	nop
     b82:	26 96       	adiw	r28, 0x06	; 6
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <USART0_Init>:
 * ubrr: Contains desired baud rate for user.
 *
 * returns: It returns nothing.
 */
void USART0_Init(unsigned int ubrr)
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	00 d0       	rcall	.+0      	; 0xb9a <USART0_Init+0x6>
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01
	//---------Set baud rate---------//
	ubrr = ubrr + 1;					/*ubrr correction*/
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char) (ubrr >> 8);
     bac:	85 ec       	ldi	r24, 0xC5	; 197
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	29 81       	ldd	r18, Y+1	; 0x01
     bb2:	3a 81       	ldd	r19, Y+2	; 0x02
     bb4:	23 2f       	mov	r18, r19
     bb6:	33 27       	eor	r19, r19
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     bbc:	84 ec       	ldi	r24, 0xC4	; 196
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	29 81       	ldd	r18, Y+1	; 0x01
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18

	//-----Control Register UCSRnA---//
	CLEAR_BIT(UCSR0A, MPCM0);			/*Disable Multi processor comm mode*/
     bc6:	80 ec       	ldi	r24, 0xC0	; 192
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	20 ec       	ldi	r18, 0xC0	; 192
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	f9 01       	movw	r30, r18
     bd0:	20 81       	ld	r18, Z
     bd2:	2e 7f       	andi	r18, 0xFE	; 254
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, U2X0); 			/*Clock Divider is 16*/
     bd8:	80 ec       	ldi	r24, 0xC0	; 192
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	20 ec       	ldi	r18, 0xC0	; 192
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	f9 01       	movw	r30, r18
     be2:	20 81       	ld	r18, Z
     be4:	2d 7f       	andi	r18, 0xFD	; 253
     be6:	fc 01       	movw	r30, r24
     be8:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, TXC0); 			/*No Transmission now*/
     bea:	80 ec       	ldi	r24, 0xC0	; 192
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	20 ec       	ldi	r18, 0xC0	; 192
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	f9 01       	movw	r30, r18
     bf4:	20 81       	ld	r18, Z
     bf6:	2f 7b       	andi	r18, 0xBF	; 191
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18

	//-----Control Register UCSRnB---//
	CLEAR_BIT(UCSR0B, UCSZ02);			/*Data length is 8 bit*/
     bfc:	81 ec       	ldi	r24, 0xC1	; 193
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	21 ec       	ldi	r18, 0xC1	; 193
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	f9 01       	movw	r30, r18
     c06:	20 81       	ld	r18, Z
     c08:	2b 7f       	andi	r18, 0xFB	; 251
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXEN0);			/*Disabled USART0 Receiver*/
     c0e:	81 ec       	ldi	r24, 0xC1	; 193
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	21 ec       	ldi	r18, 0xC1	; 193
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	f9 01       	movw	r30, r18
     c18:	20 81       	ld	r18, Z
     c1a:	2f 7e       	andi	r18, 0xEF	; 239
     c1c:	fc 01       	movw	r30, r24
     c1e:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UDRIE0);			/*Disabled - Data Buffer Empty Interrupt*/
     c20:	81 ec       	ldi	r24, 0xC1	; 193
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	21 ec       	ldi	r18, 0xC1	; 193
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	f9 01       	movw	r30, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	2f 7d       	andi	r18, 0xDF	; 223
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
     c32:	81 ec       	ldi	r24, 0xC1	; 193
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	21 ec       	ldi	r18, 0xC1	; 193
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	2f 7b       	andi	r18, 0xBF	; 191
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXCIE0);			/*Disabled - Data receive completed Interrupt*/
     c44:	81 ec       	ldi	r24, 0xC1	; 193
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	21 ec       	ldi	r18, 0xC1	; 193
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	f9 01       	movw	r30, r18
     c4e:	20 81       	ld	r18, Z
     c50:	2f 77       	andi	r18, 0x7F	; 127
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18

	//-----Control Register UCSRnC---//
	CLEAR_BIT(UCSR0C, UCPOL0);			/*Async Mode only*/
     c56:	82 ec       	ldi	r24, 0xC2	; 194
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	22 ec       	ldi	r18, 0xC2	; 194
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	2e 7f       	andi	r18, 0xFE	; 254
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
	/*Data Length*/
	SET_BIT(UCSR0B, UCSZ00);			/*Data length is 8 bit*/
     c68:	81 ec       	ldi	r24, 0xC1	; 193
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	21 ec       	ldi	r18, 0xC1	; 193
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	f9 01       	movw	r30, r18
     c72:	20 81       	ld	r18, Z
     c74:	22 60       	ori	r18, 0x02	; 2
     c76:	fc 01       	movw	r30, r24
     c78:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UCSZ01);			/*Data length is 8 bit*/
     c7a:	81 ec       	ldi	r24, 0xC1	; 193
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	21 ec       	ldi	r18, 0xC1	; 193
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	24 60       	ori	r18, 0x04	; 4
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, USBS0);			/*One Stop Bit*/
     c8c:	81 ec       	ldi	r24, 0xC1	; 193
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	21 ec       	ldi	r18, 0xC1	; 193
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	20 81       	ld	r18, Z
     c98:	27 7f       	andi	r18, 0xF7	; 247
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18
	/*Parity*/
	CLEAR_BIT(UCSR0B, UPM00);			/*Parity - Even*/
     c9e:	81 ec       	ldi	r24, 0xC1	; 193
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	21 ec       	ldi	r18, 0xC1	; 193
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	2f 7e       	andi	r18, 0xEF	; 239
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UPM01);				/*Parity - Even*/
     cb0:	81 ec       	ldi	r24, 0xC1	; 193
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	21 ec       	ldi	r18, 0xC1	; 193
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	20 62       	ori	r18, 0x20	; 32
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
	/*Mode Selection*/
	CLEAR_BIT(UCSR0B, UMSEL00);			/*Mode - Async Mode*/
     cc2:	81 ec       	ldi	r24, 0xC1	; 193
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	21 ec       	ldi	r18, 0xC1	; 193
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	2f 7b       	andi	r18, 0xBF	; 191
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UMSEL01);			/*Mode - Async Mode*/
     cd4:	81 ec       	ldi	r24, 0xC1	; 193
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	21 ec       	ldi	r18, 0xC1	; 193
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	20 81       	ld	r18, Z
     ce0:	2f 77       	andi	r18, 0x7F	; 127
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18

	//-------Make Register Ready-----//
	UDR0 = '\0';						/*Clear Transmit Register*/
     ce6:	86 ec       	ldi	r24, 0xC6	; 198
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	10 82       	st	Z, r1

	//-------Turn On Transmitter-----//
	SET_BIT(UCSR0B, TXEN0);				/*Enabled USART0 Transmitter*/
     cee:	81 ec       	ldi	r24, 0xC1	; 193
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	21 ec       	ldi	r18, 0xC1	; 193
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	f9 01       	movw	r30, r18
     cf8:	20 81       	ld	r18, Z
     cfa:	28 60       	ori	r18, 0x08	; 8
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
}
     d00:	00 00       	nop
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <USART0_Send_Data>:
 * * _data: Pointer to incoming character array.
 *
 * returns: It returns nothing.
 */
void USART0_Send_Data( register char * _data)
{
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	register uint8_t i = 0;
     d16:	10 e0       	ldi	r17, 0x00	; 0
	while(*_data != '\0')				/*Load data to serial_buffer*/
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <USART0_Send_Data+0x2c>
	{
		serial_buffer[i++] = *(_data++);
     d1a:	21 2f       	mov	r18, r17
     d1c:	11 e0       	ldi	r17, 0x01	; 1
     d1e:	12 0f       	add	r17, r18
     d20:	42 2f       	mov	r20, r18
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	9c 01       	movw	r18, r24
     d26:	c9 01       	movw	r24, r18
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	f9 01       	movw	r30, r18
     d2c:	60 81       	ld	r22, Z
     d2e:	9a 01       	movw	r18, r20
     d30:	2c 56       	subi	r18, 0x6C	; 108
     d32:	3e 4f       	sbci	r19, 0xFE	; 254
     d34:	f9 01       	movw	r30, r18
     d36:	60 83       	st	Z, r22
 * returns: It returns nothing.
 */
void USART0_Send_Data( register char * _data)
{
	register uint8_t i = 0;
	while(*_data != '\0')				/*Load data to serial_buffer*/
     d38:	fc 01       	movw	r30, r24
     d3a:	20 81       	ld	r18, Z
     d3c:	22 23       	and	r18, r18
     d3e:	69 f7       	brne	.-38     	; 0xd1a <USART0_Send_Data+0xe>
	{
		serial_buffer[i++] = *(_data++);
	}
	serial_buffer[i] = '\n';
     d40:	81 2f       	mov	r24, r17
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	8c 56       	subi	r24, 0x6C	; 108
     d46:	9e 4f       	sbci	r25, 0xFE	; 254
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
	buffer_pointer = serial_buffer;		/*Set serial buffer pointer*/
     d4e:	84 e9       	ldi	r24, 0x94	; 148
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <buffer_pointer+0x1>
     d56:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <buffer_pointer>

	SET_BIT(UCSR0B, UDRIE0);			/*Enabled - Data Buffer Empty Interrupt*/
     d5a:	81 ec       	ldi	r24, 0xC1	; 193
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	21 ec       	ldi	r18, 0xC1	; 193
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	f9 01       	movw	r30, r18
     d64:	20 81       	ld	r18, Z
     d66:	20 62       	ori	r18, 0x20	; 32
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, TXCIE0);			/*Enabled - Data transmission completed Interrupt*/
     d6c:	81 ec       	ldi	r24, 0xC1	; 193
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	21 ec       	ldi	r18, 0xC1	; 193
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	20 64       	ori	r18, 0x40	; 64
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
}
     d7e:	00 00       	nop
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <__vector_19>:
 * transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_UDRE_vect)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	if(*buffer_pointer != '\n')
     dac:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <buffer_pointer>
     db0:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <buffer_pointer+0x1>
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	8a 30       	cpi	r24, 0x0A	; 10
     dba:	91 f0       	breq	.+36     	; 0xde0 <__vector_19+0x58>
	{
		UDR0 = *(buffer_pointer++);		/*Load Next Data Byte*/
     dbc:	26 ec       	ldi	r18, 0xC6	; 198
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <buffer_pointer>
     dc4:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <buffer_pointer+0x1>
     dc8:	ac 01       	movw	r20, r24
     dca:	4f 5f       	subi	r20, 0xFF	; 255
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	50 93 f9 01 	sts	0x01F9, r21	; 0x8001f9 <buffer_pointer+0x1>
     dd2:	40 93 f8 01 	sts	0x01F8, r20	; 0x8001f8 <buffer_pointer>
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	f9 01       	movw	r30, r18
     ddc:	80 83       	st	Z, r24
	else
	{
		UDR0 = '\n';
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
	}
}
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <__vector_19+0x74>
	{
		UDR0 = *(buffer_pointer++);		/*Load Next Data Byte*/
	}
	else
	{
		UDR0 = '\n';
     de0:	86 ec       	ldi	r24, 0xC6	; 198
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	2a e0       	ldi	r18, 0x0A	; 10
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
     dea:	81 ec       	ldi	r24, 0xC1	; 193
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	21 ec       	ldi	r18, 0xC1	; 193
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	f9 01       	movw	r30, r18
     df4:	20 81       	ld	r18, Z
     df6:	2f 7d       	andi	r18, 0xDF	; 223
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18
	}
}
     dfc:	00 00       	nop
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_20>:
 * bytes are transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_TX_vect)
{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	/* The TXCn Flag bit is automatically cleared,
	 * when a transmit complete interrupt is executed
	 */

	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
     e3e:	81 ec       	ldi	r24, 0xC1	; 193
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	21 ec       	ldi	r18, 0xC1	; 193
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	2f 7b       	andi	r18, 0xBF	; 191
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
}
     e50:	00 00       	nop
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__divmodhi4>:
     e6e:	97 fb       	bst	r25, 7
     e70:	07 2e       	mov	r0, r23
     e72:	16 f4       	brtc	.+4      	; 0xe78 <__divmodhi4+0xa>
     e74:	00 94       	com	r0
     e76:	07 d0       	rcall	.+14     	; 0xe86 <__divmodhi4_neg1>
     e78:	77 fd       	sbrc	r23, 7
     e7a:	09 d0       	rcall	.+18     	; 0xe8e <__divmodhi4_neg2>
     e7c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__udivmodhi4>
     e80:	07 fc       	sbrc	r0, 7
     e82:	05 d0       	rcall	.+10     	; 0xe8e <__divmodhi4_neg2>
     e84:	3e f4       	brtc	.+14     	; 0xe94 <__divmodhi4_exit>

00000e86 <__divmodhi4_neg1>:
     e86:	90 95       	com	r25
     e88:	81 95       	neg	r24
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	08 95       	ret

00000e8e <__divmodhi4_neg2>:
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255

00000e94 <__divmodhi4_exit>:
     e94:	08 95       	ret

00000e96 <__udivmodhi4>:
     e96:	aa 1b       	sub	r26, r26
     e98:	bb 1b       	sub	r27, r27
     e9a:	51 e1       	ldi	r21, 0x11	; 17
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <__udivmodhi4_ep>

00000e9e <__udivmodhi4_loop>:
     e9e:	aa 1f       	adc	r26, r26
     ea0:	bb 1f       	adc	r27, r27
     ea2:	a6 17       	cp	r26, r22
     ea4:	b7 07       	cpc	r27, r23
     ea6:	10 f0       	brcs	.+4      	; 0xeac <__udivmodhi4_ep>
     ea8:	a6 1b       	sub	r26, r22
     eaa:	b7 0b       	sbc	r27, r23

00000eac <__udivmodhi4_ep>:
     eac:	88 1f       	adc	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	5a 95       	dec	r21
     eb2:	a9 f7       	brne	.-22     	; 0xe9e <__udivmodhi4_loop>
     eb4:	80 95       	com	r24
     eb6:	90 95       	com	r25
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	08 95       	ret

00000ebe <__cmpsf2>:
     ebe:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_cmp>
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <__cmpsf2+0x8>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	08 95       	ret

00000ec8 <__fixunssfsi>:
     ec8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_splitA>
     ecc:	88 f0       	brcs	.+34     	; 0xef0 <__fixunssfsi+0x28>
     ece:	9f 57       	subi	r25, 0x7F	; 127
     ed0:	98 f0       	brcs	.+38     	; 0xef8 <__fixunssfsi+0x30>
     ed2:	b9 2f       	mov	r27, r25
     ed4:	99 27       	eor	r25, r25
     ed6:	b7 51       	subi	r27, 0x17	; 23
     ed8:	b0 f0       	brcs	.+44     	; 0xf06 <__fixunssfsi+0x3e>
     eda:	e1 f0       	breq	.+56     	; 0xf14 <__fixunssfsi+0x4c>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	88 1f       	adc	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	1a f0       	brmi	.+6      	; 0xeec <__fixunssfsi+0x24>
     ee6:	ba 95       	dec	r27
     ee8:	c9 f7       	brne	.-14     	; 0xedc <__fixunssfsi+0x14>
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <__fixunssfsi+0x4c>
     eec:	b1 30       	cpi	r27, 0x01	; 1
     eee:	91 f0       	breq	.+36     	; 0xf14 <__fixunssfsi+0x4c>
     ef0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_zero>
     ef4:	b1 e0       	ldi	r27, 0x01	; 1
     ef6:	08 95       	ret
     ef8:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_zero>
     efc:	67 2f       	mov	r22, r23
     efe:	78 2f       	mov	r23, r24
     f00:	88 27       	eor	r24, r24
     f02:	b8 5f       	subi	r27, 0xF8	; 248
     f04:	39 f0       	breq	.+14     	; 0xf14 <__fixunssfsi+0x4c>
     f06:	b9 3f       	cpi	r27, 0xF9	; 249
     f08:	cc f3       	brlt	.-14     	; 0xefc <__fixunssfsi+0x34>
     f0a:	86 95       	lsr	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b3 95       	inc	r27
     f12:	d9 f7       	brne	.-10     	; 0xf0a <__fixunssfsi+0x42>
     f14:	3e f4       	brtc	.+14     	; 0xf24 <__fixunssfsi+0x5c>
     f16:	90 95       	com	r25
     f18:	80 95       	com	r24
     f1a:	70 95       	com	r23
     f1c:	61 95       	neg	r22
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	08 95       	ret

00000f26 <__fp_cmp>:
     f26:	99 0f       	add	r25, r25
     f28:	00 08       	sbc	r0, r0
     f2a:	55 0f       	add	r21, r21
     f2c:	aa 0b       	sbc	r26, r26
     f2e:	e0 e8       	ldi	r30, 0x80	; 128
     f30:	fe ef       	ldi	r31, 0xFE	; 254
     f32:	16 16       	cp	r1, r22
     f34:	17 06       	cpc	r1, r23
     f36:	e8 07       	cpc	r30, r24
     f38:	f9 07       	cpc	r31, r25
     f3a:	c0 f0       	brcs	.+48     	; 0xf6c <__fp_cmp+0x46>
     f3c:	12 16       	cp	r1, r18
     f3e:	13 06       	cpc	r1, r19
     f40:	e4 07       	cpc	r30, r20
     f42:	f5 07       	cpc	r31, r21
     f44:	98 f0       	brcs	.+38     	; 0xf6c <__fp_cmp+0x46>
     f46:	62 1b       	sub	r22, r18
     f48:	73 0b       	sbc	r23, r19
     f4a:	84 0b       	sbc	r24, r20
     f4c:	95 0b       	sbc	r25, r21
     f4e:	39 f4       	brne	.+14     	; 0xf5e <__fp_cmp+0x38>
     f50:	0a 26       	eor	r0, r26
     f52:	61 f0       	breq	.+24     	; 0xf6c <__fp_cmp+0x46>
     f54:	23 2b       	or	r18, r19
     f56:	24 2b       	or	r18, r20
     f58:	25 2b       	or	r18, r21
     f5a:	21 f4       	brne	.+8      	; 0xf64 <__fp_cmp+0x3e>
     f5c:	08 95       	ret
     f5e:	0a 26       	eor	r0, r26
     f60:	09 f4       	brne	.+2      	; 0xf64 <__fp_cmp+0x3e>
     f62:	a1 40       	sbci	r26, 0x01	; 1
     f64:	a6 95       	lsr	r26
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	81 1d       	adc	r24, r1
     f6a:	81 1d       	adc	r24, r1
     f6c:	08 95       	ret

00000f6e <__fp_split3>:
     f6e:	57 fd       	sbrc	r21, 7
     f70:	90 58       	subi	r25, 0x80	; 128
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	59 f0       	breq	.+22     	; 0xf8e <__fp_splitA+0x10>
     f78:	5f 3f       	cpi	r21, 0xFF	; 255
     f7a:	71 f0       	breq	.+28     	; 0xf98 <__fp_splitA+0x1a>
     f7c:	47 95       	ror	r20

00000f7e <__fp_splitA>:
     f7e:	88 0f       	add	r24, r24
     f80:	97 fb       	bst	r25, 7
     f82:	99 1f       	adc	r25, r25
     f84:	61 f0       	breq	.+24     	; 0xf9e <__fp_splitA+0x20>
     f86:	9f 3f       	cpi	r25, 0xFF	; 255
     f88:	79 f0       	breq	.+30     	; 0xfa8 <__fp_splitA+0x2a>
     f8a:	87 95       	ror	r24
     f8c:	08 95       	ret
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	55 1f       	adc	r21, r21
     f96:	f2 cf       	rjmp	.-28     	; 0xf7c <__fp_split3+0xe>
     f98:	46 95       	lsr	r20
     f9a:	f1 df       	rcall	.-30     	; 0xf7e <__fp_splitA>
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <__fp_splitA+0x30>
     f9e:	16 16       	cp	r1, r22
     fa0:	17 06       	cpc	r1, r23
     fa2:	18 06       	cpc	r1, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	f1 cf       	rjmp	.-30     	; 0xf8a <__fp_splitA+0xc>
     fa8:	86 95       	lsr	r24
     faa:	71 05       	cpc	r23, r1
     fac:	61 05       	cpc	r22, r1
     fae:	08 94       	sec
     fb0:	08 95       	ret

00000fb2 <__fp_zero>:
     fb2:	e8 94       	clt

00000fb4 <__fp_szero>:
     fb4:	bb 27       	eor	r27, r27
     fb6:	66 27       	eor	r22, r22
     fb8:	77 27       	eor	r23, r23
     fba:	cb 01       	movw	r24, r22
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__gesf2>:
     fc0:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_cmp>
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <__gesf2+0x8>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	08 95       	ret

00000fca <__mulsf3>:
     fca:	0e 94 f8 07 	call	0xff0	; 0xff0 <__mulsf3x>
     fce:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__fp_round>
     fd2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_pscA>
     fd6:	38 f0       	brcs	.+14     	; 0xfe6 <__mulsf3+0x1c>
     fd8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscB>
     fdc:	20 f0       	brcs	.+8      	; 0xfe6 <__mulsf3+0x1c>
     fde:	95 23       	and	r25, r21
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <__mulsf3+0x1c>
     fe2:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
     fe6:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_nan>
     fea:	11 24       	eor	r1, r1
     fec:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>

00000ff0 <__mulsf3x>:
     ff0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     ff4:	70 f3       	brcs	.-36     	; 0xfd2 <__mulsf3+0x8>

00000ff6 <__mulsf3_pse>:
     ff6:	95 9f       	mul	r25, r21
     ff8:	c1 f3       	breq	.-16     	; 0xfea <__mulsf3+0x20>
     ffa:	95 0f       	add	r25, r21
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	55 1f       	adc	r21, r21
    1000:	62 9f       	mul	r22, r18
    1002:	f0 01       	movw	r30, r0
    1004:	72 9f       	mul	r23, r18
    1006:	bb 27       	eor	r27, r27
    1008:	f0 0d       	add	r31, r0
    100a:	b1 1d       	adc	r27, r1
    100c:	63 9f       	mul	r22, r19
    100e:	aa 27       	eor	r26, r26
    1010:	f0 0d       	add	r31, r0
    1012:	b1 1d       	adc	r27, r1
    1014:	aa 1f       	adc	r26, r26
    1016:	64 9f       	mul	r22, r20
    1018:	66 27       	eor	r22, r22
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	66 1f       	adc	r22, r22
    1020:	82 9f       	mul	r24, r18
    1022:	22 27       	eor	r18, r18
    1024:	b0 0d       	add	r27, r0
    1026:	a1 1d       	adc	r26, r1
    1028:	62 1f       	adc	r22, r18
    102a:	73 9f       	mul	r23, r19
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	62 1f       	adc	r22, r18
    1032:	83 9f       	mul	r24, r19
    1034:	a0 0d       	add	r26, r0
    1036:	61 1d       	adc	r22, r1
    1038:	22 1f       	adc	r18, r18
    103a:	74 9f       	mul	r23, r20
    103c:	33 27       	eor	r19, r19
    103e:	a0 0d       	add	r26, r0
    1040:	61 1d       	adc	r22, r1
    1042:	23 1f       	adc	r18, r19
    1044:	84 9f       	mul	r24, r20
    1046:	60 0d       	add	r22, r0
    1048:	21 1d       	adc	r18, r1
    104a:	82 2f       	mov	r24, r18
    104c:	76 2f       	mov	r23, r22
    104e:	6a 2f       	mov	r22, r26
    1050:	11 24       	eor	r1, r1
    1052:	9f 57       	subi	r25, 0x7F	; 127
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	9a f0       	brmi	.+38     	; 0x107e <__mulsf3_pse+0x88>
    1058:	f1 f0       	breq	.+60     	; 0x1096 <__mulsf3_pse+0xa0>
    105a:	88 23       	and	r24, r24
    105c:	4a f0       	brmi	.+18     	; 0x1070 <__mulsf3_pse+0x7a>
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	bb 1f       	adc	r27, r27
    1064:	66 1f       	adc	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	91 50       	subi	r25, 0x01	; 1
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	a9 f7       	brne	.-22     	; 0x105a <__mulsf3_pse+0x64>
    1070:	9e 3f       	cpi	r25, 0xFE	; 254
    1072:	51 05       	cpc	r21, r1
    1074:	80 f0       	brcs	.+32     	; 0x1096 <__mulsf3_pse+0xa0>
    1076:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_inf>
    107a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
    107e:	5f 3f       	cpi	r21, 0xFF	; 255
    1080:	e4 f3       	brlt	.-8      	; 0x107a <__mulsf3_pse+0x84>
    1082:	98 3e       	cpi	r25, 0xE8	; 232
    1084:	d4 f3       	brlt	.-12     	; 0x107a <__mulsf3_pse+0x84>
    1086:	86 95       	lsr	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	b7 95       	ror	r27
    108e:	f7 95       	ror	r31
    1090:	e7 95       	ror	r30
    1092:	9f 5f       	subi	r25, 0xFF	; 255
    1094:	c1 f7       	brne	.-16     	; 0x1086 <__mulsf3_pse+0x90>
    1096:	fe 2b       	or	r31, r30
    1098:	88 0f       	add	r24, r24
    109a:	91 1d       	adc	r25, r1
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret

000010a4 <__fp_inf>:
    10a4:	97 f9       	bld	r25, 7
    10a6:	9f 67       	ori	r25, 0x7F	; 127
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	08 95       	ret

000010b0 <__fp_nan>:
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	80 ec       	ldi	r24, 0xC0	; 192
    10b4:	08 95       	ret

000010b6 <__fp_pscA>:
    10b6:	00 24       	eor	r0, r0
    10b8:	0a 94       	dec	r0
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	09 06       	cpc	r0, r25
    10c2:	08 95       	ret

000010c4 <__fp_pscB>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	14 06       	cpc	r1, r20
    10ce:	05 06       	cpc	r0, r21
    10d0:	08 95       	ret

000010d2 <__fp_round>:
    10d2:	09 2e       	mov	r0, r25
    10d4:	03 94       	inc	r0
    10d6:	00 0c       	add	r0, r0
    10d8:	11 f4       	brne	.+4      	; 0x10de <__fp_round+0xc>
    10da:	88 23       	and	r24, r24
    10dc:	52 f0       	brmi	.+20     	; 0x10f2 <__fp_round+0x20>
    10de:	bb 0f       	add	r27, r27
    10e0:	40 f4       	brcc	.+16     	; 0x10f2 <__fp_round+0x20>
    10e2:	bf 2b       	or	r27, r31
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__fp_round+0x18>
    10e6:	60 ff       	sbrs	r22, 0
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__fp_round+0x20>
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <_exit>:
    10f4:	f8 94       	cli

000010f6 <__stop_program>:
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <__stop_program>
