
AVR_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000046a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005ac  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bcb  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "common_preprocessors.h"
#include "power_management.h"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	2e 97       	sbiw	r28, 0x0e	; 14
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	//-------------Inits-------------//
	/*POWER MANAGEMENT*/
	DISABLE_ADC; ENABLE_I2C;			/*Disable ADC*/ /*ENABLE I2C*/
  94:	84 e6       	ldi	r24, 0x64	; 100
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	24 e6       	ldi	r18, 0x64	; 100
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	21 60       	ori	r18, 0x01	; 1
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	24 e6       	ldi	r18, 0x64	; 100
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	2f 77       	andi	r18, 0x7F	; 127
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	DISABLE_SPI; DISABLE_TIMER0;		/*Disable SPI*/ /*DISABLE TIMER0*/
  b8:	84 e6       	ldi	r24, 0x64	; 100
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	24 e6       	ldi	r18, 0x64	; 100
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	24 60       	ori	r18, 0x04	; 4
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	84 e6       	ldi	r24, 0x64	; 100
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	24 e6       	ldi	r18, 0x64	; 100
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	20 62       	ori	r18, 0x20	; 32
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	DISABLE_TIMER1; DISABLE_TIMER2;		/*Disable TIMER1*/ /*DISABLE TIMER2*/
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	24 e6       	ldi	r18, 0x64	; 100
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	28 60       	ori	r18, 0x08	; 8
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
  ee:	84 e6       	ldi	r24, 0x64	; 100
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	24 e6       	ldi	r18, 0x64	; 100
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	20 64       	ori	r18, 0x40	; 64
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	DISABLE_USART0;						/*Disable USART0*/
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 e6       	ldi	r18, 0x64	; 100
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	22 60       	ori	r18, 0x02	; 2
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	/*GPIO*/
	SET_BIT(DDRB, PB5);					/*Pin PB5 as Output*/
 112:	84 e2       	ldi	r24, 0x24	; 36
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	24 e2       	ldi	r18, 0x24	; 36
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	20 62       	ori	r18, 0x20	; 32
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	CLEAR_BIT(PORTB, PB5);				/*Clear PB5 Bit*/
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	25 e2       	ldi	r18, 0x25	; 37
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	2f 7d       	andi	r18, 0xDF	; 223
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18

	//-----------Event loop----------//
	while (1)
	{
		/*Blink LED Example*/
		TOGGLE_BIT(PORTB, PB5);
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	25 e2       	ldi	r18, 0x25	; 37
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	30 81       	ld	r19, Z
 142:	20 e2       	ldi	r18, 0x20	; 32
 144:	23 27       	eor	r18, r19
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	aa e7       	ldi	r26, 0x7A	; 122
 150:	b4 e4       	ldi	r27, 0x44	; 68
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	ab 83       	std	Y+3, r26	; 0x03
 158:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	4a e7       	ldi	r20, 0x7A	; 122
 160:	55 e4       	ldi	r21, 0x45	; 69
 162:	69 81       	ldd	r22, Y+1	; 0x01
 164:	7a 81       	ldd	r23, Y+2	; 0x02
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulsf3>
 16e:	dc 01       	movw	r26, r24
 170:	cb 01       	movw	r24, r22
 172:	8d 83       	std	Y+5, r24	; 0x05
 174:	9e 83       	std	Y+6, r25	; 0x06
 176:	af 83       	std	Y+7, r26	; 0x07
 178:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e8       	ldi	r20, 0x80	; 128
 180:	5f e3       	ldi	r21, 0x3F	; 63
 182:	6d 81       	ldd	r22, Y+5	; 0x05
 184:	7e 81       	ldd	r23, Y+6	; 0x06
 186:	8f 81       	ldd	r24, Y+7	; 0x07
 188:	98 85       	ldd	r25, Y+8	; 0x08
 18a:	0e 94 18 01 	call	0x230	; 0x230 <__cmpsf2>
 18e:	88 23       	and	r24, r24
 190:	2c f4       	brge	.+10     	; 0x19c <main+0x11c>
		__ticks = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9a 87       	std	Y+10, r25	; 0x0a
 198:	89 87       	std	Y+9, r24	; 0x09
 19a:	3f c0       	rjmp	.+126    	; 0x21a <main+0x19a>
	else if (__tmp > 65535)
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	3f ef       	ldi	r19, 0xFF	; 255
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	57 e4       	ldi	r21, 0x47	; 71
 1a4:	6d 81       	ldd	r22, Y+5	; 0x05
 1a6:	7e 81       	ldd	r23, Y+6	; 0x06
 1a8:	8f 81       	ldd	r24, Y+7	; 0x07
 1aa:	98 85       	ldd	r25, Y+8	; 0x08
 1ac:	0e 94 99 01 	call	0x332	; 0x332 <__gesf2>
 1b0:	18 16       	cp	r1, r24
 1b2:	4c f5       	brge	.+82     	; 0x206 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e2       	ldi	r20, 0x20	; 32
 1ba:	51 e4       	ldi	r21, 0x41	; 65
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	7a 81       	ldd	r23, Y+2	; 0x02
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	9c 81       	ldd	r25, Y+4	; 0x04
 1c4:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulsf3>
 1c8:	dc 01       	movw	r26, r24
 1ca:	cb 01       	movw	r24, r22
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	0e 94 1d 01 	call	0x23a	; 0x23a <__fixunssfsi>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	9a 87       	std	Y+10, r25	; 0x0a
 1da:	89 87       	std	Y+9, r24	; 0x09
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <main+0x17c>
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	9c 87       	std	Y+12, r25	; 0x0c
 1e4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1e8:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x16a>
 1ee:	9c 87       	std	Y+12, r25	; 0x0c
 1f0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f2:	89 85       	ldd	r24, Y+9	; 0x09
 1f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	9a 87       	std	Y+10, r25	; 0x0a
 1fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fc:	89 85       	ldd	r24, Y+9	; 0x09
 1fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 200:	89 2b       	or	r24, r25
 202:	69 f7       	brne	.-38     	; 0x1de <main+0x15e>
 204:	14 c0       	rjmp	.+40     	; 0x22e <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 206:	6d 81       	ldd	r22, Y+5	; 0x05
 208:	7e 81       	ldd	r23, Y+6	; 0x06
 20a:	8f 81       	ldd	r24, Y+7	; 0x07
 20c:	98 85       	ldd	r25, Y+8	; 0x08
 20e:	0e 94 1d 01 	call	0x23a	; 0x23a <__fixunssfsi>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9a 87       	std	Y+10, r25	; 0x0a
 218:	89 87       	std	Y+9, r24	; 0x09
 21a:	89 85       	ldd	r24, Y+9	; 0x09
 21c:	9a 85       	ldd	r25, Y+10	; 0x0a
 21e:	9e 87       	std	Y+14, r25	; 0x0e
 220:	8d 87       	std	Y+13, r24	; 0x0d
 222:	8d 85       	ldd	r24, Y+13	; 0x0d
 224:	9e 85       	ldd	r25, Y+14	; 0x0e
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x1a6>
 22a:	9e 87       	std	Y+14, r25	; 0x0e
 22c:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1000);
	}
 22e:	83 cf       	rjmp	.-250    	; 0x136 <main+0xb6>

00000230 <__cmpsf2>:
 230:	0e 94 4c 01 	call	0x298	; 0x298 <__fp_cmp>
 234:	08 f4       	brcc	.+2      	; 0x238 <__cmpsf2+0x8>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <__fixunssfsi>:
 23a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__fp_splitA>
 23e:	88 f0       	brcs	.+34     	; 0x262 <__fixunssfsi+0x28>
 240:	9f 57       	subi	r25, 0x7F	; 127
 242:	98 f0       	brcs	.+38     	; 0x26a <__fixunssfsi+0x30>
 244:	b9 2f       	mov	r27, r25
 246:	99 27       	eor	r25, r25
 248:	b7 51       	subi	r27, 0x17	; 23
 24a:	b0 f0       	brcs	.+44     	; 0x278 <__fixunssfsi+0x3e>
 24c:	e1 f0       	breq	.+56     	; 0x286 <__fixunssfsi+0x4c>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	1a f0       	brmi	.+6      	; 0x25e <__fixunssfsi+0x24>
 258:	ba 95       	dec	r27
 25a:	c9 f7       	brne	.-14     	; 0x24e <__fixunssfsi+0x14>
 25c:	14 c0       	rjmp	.+40     	; 0x286 <__fixunssfsi+0x4c>
 25e:	b1 30       	cpi	r27, 0x01	; 1
 260:	91 f0       	breq	.+36     	; 0x286 <__fixunssfsi+0x4c>
 262:	0e 94 92 01 	call	0x324	; 0x324 <__fp_zero>
 266:	b1 e0       	ldi	r27, 0x01	; 1
 268:	08 95       	ret
 26a:	0c 94 92 01 	jmp	0x324	; 0x324 <__fp_zero>
 26e:	67 2f       	mov	r22, r23
 270:	78 2f       	mov	r23, r24
 272:	88 27       	eor	r24, r24
 274:	b8 5f       	subi	r27, 0xF8	; 248
 276:	39 f0       	breq	.+14     	; 0x286 <__fixunssfsi+0x4c>
 278:	b9 3f       	cpi	r27, 0xF9	; 249
 27a:	cc f3       	brlt	.-14     	; 0x26e <__fixunssfsi+0x34>
 27c:	86 95       	lsr	r24
 27e:	77 95       	ror	r23
 280:	67 95       	ror	r22
 282:	b3 95       	inc	r27
 284:	d9 f7       	brne	.-10     	; 0x27c <__fixunssfsi+0x42>
 286:	3e f4       	brtc	.+14     	; 0x296 <__fixunssfsi+0x5c>
 288:	90 95       	com	r25
 28a:	80 95       	com	r24
 28c:	70 95       	com	r23
 28e:	61 95       	neg	r22
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	8f 4f       	sbci	r24, 0xFF	; 255
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	08 95       	ret

00000298 <__fp_cmp>:
 298:	99 0f       	add	r25, r25
 29a:	00 08       	sbc	r0, r0
 29c:	55 0f       	add	r21, r21
 29e:	aa 0b       	sbc	r26, r26
 2a0:	e0 e8       	ldi	r30, 0x80	; 128
 2a2:	fe ef       	ldi	r31, 0xFE	; 254
 2a4:	16 16       	cp	r1, r22
 2a6:	17 06       	cpc	r1, r23
 2a8:	e8 07       	cpc	r30, r24
 2aa:	f9 07       	cpc	r31, r25
 2ac:	c0 f0       	brcs	.+48     	; 0x2de <__fp_cmp+0x46>
 2ae:	12 16       	cp	r1, r18
 2b0:	13 06       	cpc	r1, r19
 2b2:	e4 07       	cpc	r30, r20
 2b4:	f5 07       	cpc	r31, r21
 2b6:	98 f0       	brcs	.+38     	; 0x2de <__fp_cmp+0x46>
 2b8:	62 1b       	sub	r22, r18
 2ba:	73 0b       	sbc	r23, r19
 2bc:	84 0b       	sbc	r24, r20
 2be:	95 0b       	sbc	r25, r21
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__fp_cmp+0x38>
 2c2:	0a 26       	eor	r0, r26
 2c4:	61 f0       	breq	.+24     	; 0x2de <__fp_cmp+0x46>
 2c6:	23 2b       	or	r18, r19
 2c8:	24 2b       	or	r18, r20
 2ca:	25 2b       	or	r18, r21
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <__fp_cmp+0x3e>
 2ce:	08 95       	ret
 2d0:	0a 26       	eor	r0, r26
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <__fp_cmp+0x3e>
 2d4:	a1 40       	sbci	r26, 0x01	; 1
 2d6:	a6 95       	lsr	r26
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	81 1d       	adc	r24, r1
 2dc:	81 1d       	adc	r24, r1
 2de:	08 95       	ret

000002e0 <__fp_split3>:
 2e0:	57 fd       	sbrc	r21, 7
 2e2:	90 58       	subi	r25, 0x80	; 128
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	59 f0       	breq	.+22     	; 0x300 <__fp_splitA+0x10>
 2ea:	5f 3f       	cpi	r21, 0xFF	; 255
 2ec:	71 f0       	breq	.+28     	; 0x30a <__fp_splitA+0x1a>
 2ee:	47 95       	ror	r20

000002f0 <__fp_splitA>:
 2f0:	88 0f       	add	r24, r24
 2f2:	97 fb       	bst	r25, 7
 2f4:	99 1f       	adc	r25, r25
 2f6:	61 f0       	breq	.+24     	; 0x310 <__fp_splitA+0x20>
 2f8:	9f 3f       	cpi	r25, 0xFF	; 255
 2fa:	79 f0       	breq	.+30     	; 0x31a <__fp_splitA+0x2a>
 2fc:	87 95       	ror	r24
 2fe:	08 95       	ret
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	14 06       	cpc	r1, r20
 306:	55 1f       	adc	r21, r21
 308:	f2 cf       	rjmp	.-28     	; 0x2ee <__fp_split3+0xe>
 30a:	46 95       	lsr	r20
 30c:	f1 df       	rcall	.-30     	; 0x2f0 <__fp_splitA>
 30e:	08 c0       	rjmp	.+16     	; 0x320 <__fp_splitA+0x30>
 310:	16 16       	cp	r1, r22
 312:	17 06       	cpc	r1, r23
 314:	18 06       	cpc	r1, r24
 316:	99 1f       	adc	r25, r25
 318:	f1 cf       	rjmp	.-30     	; 0x2fc <__fp_splitA+0xc>
 31a:	86 95       	lsr	r24
 31c:	71 05       	cpc	r23, r1
 31e:	61 05       	cpc	r22, r1
 320:	08 94       	sec
 322:	08 95       	ret

00000324 <__fp_zero>:
 324:	e8 94       	clt

00000326 <__fp_szero>:
 326:	bb 27       	eor	r27, r27
 328:	66 27       	eor	r22, r22
 32a:	77 27       	eor	r23, r23
 32c:	cb 01       	movw	r24, r22
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret

00000332 <__gesf2>:
 332:	0e 94 4c 01 	call	0x298	; 0x298 <__fp_cmp>
 336:	08 f4       	brcc	.+2      	; 0x33a <__gesf2+0x8>
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	08 95       	ret

0000033c <__mulsf3>:
 33c:	0e 94 b1 01 	call	0x362	; 0x362 <__mulsf3x>
 340:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_round>
 344:	0e 94 14 02 	call	0x428	; 0x428 <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__mulsf3+0x1c>
 34a:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__mulsf3+0x1c>
 350:	95 23       	and	r25, r21
 352:	11 f0       	breq	.+4      	; 0x358 <__mulsf3+0x1c>
 354:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_inf>
 358:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_nan>
 35c:	11 24       	eor	r1, r1
 35e:	0c 94 93 01 	jmp	0x326	; 0x326 <__fp_szero>

00000362 <__mulsf3x>:
 362:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fp_split3>
 366:	70 f3       	brcs	.-36     	; 0x344 <__mulsf3+0x8>

00000368 <__mulsf3_pse>:
 368:	95 9f       	mul	r25, r21
 36a:	c1 f3       	breq	.-16     	; 0x35c <__mulsf3+0x20>
 36c:	95 0f       	add	r25, r21
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	55 1f       	adc	r21, r21
 372:	62 9f       	mul	r22, r18
 374:	f0 01       	movw	r30, r0
 376:	72 9f       	mul	r23, r18
 378:	bb 27       	eor	r27, r27
 37a:	f0 0d       	add	r31, r0
 37c:	b1 1d       	adc	r27, r1
 37e:	63 9f       	mul	r22, r19
 380:	aa 27       	eor	r26, r26
 382:	f0 0d       	add	r31, r0
 384:	b1 1d       	adc	r27, r1
 386:	aa 1f       	adc	r26, r26
 388:	64 9f       	mul	r22, r20
 38a:	66 27       	eor	r22, r22
 38c:	b0 0d       	add	r27, r0
 38e:	a1 1d       	adc	r26, r1
 390:	66 1f       	adc	r22, r22
 392:	82 9f       	mul	r24, r18
 394:	22 27       	eor	r18, r18
 396:	b0 0d       	add	r27, r0
 398:	a1 1d       	adc	r26, r1
 39a:	62 1f       	adc	r22, r18
 39c:	73 9f       	mul	r23, r19
 39e:	b0 0d       	add	r27, r0
 3a0:	a1 1d       	adc	r26, r1
 3a2:	62 1f       	adc	r22, r18
 3a4:	83 9f       	mul	r24, r19
 3a6:	a0 0d       	add	r26, r0
 3a8:	61 1d       	adc	r22, r1
 3aa:	22 1f       	adc	r18, r18
 3ac:	74 9f       	mul	r23, r20
 3ae:	33 27       	eor	r19, r19
 3b0:	a0 0d       	add	r26, r0
 3b2:	61 1d       	adc	r22, r1
 3b4:	23 1f       	adc	r18, r19
 3b6:	84 9f       	mul	r24, r20
 3b8:	60 0d       	add	r22, r0
 3ba:	21 1d       	adc	r18, r1
 3bc:	82 2f       	mov	r24, r18
 3be:	76 2f       	mov	r23, r22
 3c0:	6a 2f       	mov	r22, r26
 3c2:	11 24       	eor	r1, r1
 3c4:	9f 57       	subi	r25, 0x7F	; 127
 3c6:	50 40       	sbci	r21, 0x00	; 0
 3c8:	9a f0       	brmi	.+38     	; 0x3f0 <__mulsf3_pse+0x88>
 3ca:	f1 f0       	breq	.+60     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3cc:	88 23       	and	r24, r24
 3ce:	4a f0       	brmi	.+18     	; 0x3e2 <__mulsf3_pse+0x7a>
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	bb 1f       	adc	r27, r27
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	50 40       	sbci	r21, 0x00	; 0
 3e0:	a9 f7       	brne	.-22     	; 0x3cc <__mulsf3_pse+0x64>
 3e2:	9e 3f       	cpi	r25, 0xFE	; 254
 3e4:	51 05       	cpc	r21, r1
 3e6:	80 f0       	brcs	.+32     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_inf>
 3ec:	0c 94 93 01 	jmp	0x326	; 0x326 <__fp_szero>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	e4 f3       	brlt	.-8      	; 0x3ec <__mulsf3_pse+0x84>
 3f4:	98 3e       	cpi	r25, 0xE8	; 232
 3f6:	d4 f3       	brlt	.-12     	; 0x3ec <__mulsf3_pse+0x84>
 3f8:	86 95       	lsr	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b7 95       	ror	r27
 400:	f7 95       	ror	r31
 402:	e7 95       	ror	r30
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	c1 f7       	brne	.-16     	; 0x3f8 <__mulsf3_pse+0x90>
 408:	fe 2b       	or	r31, r30
 40a:	88 0f       	add	r24, r24
 40c:	91 1d       	adc	r25, r1
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret

00000416 <__fp_inf>:
 416:	97 f9       	bld	r25, 7
 418:	9f 67       	ori	r25, 0x7F	; 127
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	08 95       	ret

00000422 <__fp_nan>:
 422:	9f ef       	ldi	r25, 0xFF	; 255
 424:	80 ec       	ldi	r24, 0xC0	; 192
 426:	08 95       	ret

00000428 <__fp_pscA>:
 428:	00 24       	eor	r0, r0
 42a:	0a 94       	dec	r0
 42c:	16 16       	cp	r1, r22
 42e:	17 06       	cpc	r1, r23
 430:	18 06       	cpc	r1, r24
 432:	09 06       	cpc	r0, r25
 434:	08 95       	ret

00000436 <__fp_pscB>:
 436:	00 24       	eor	r0, r0
 438:	0a 94       	dec	r0
 43a:	12 16       	cp	r1, r18
 43c:	13 06       	cpc	r1, r19
 43e:	14 06       	cpc	r1, r20
 440:	05 06       	cpc	r0, r21
 442:	08 95       	ret

00000444 <__fp_round>:
 444:	09 2e       	mov	r0, r25
 446:	03 94       	inc	r0
 448:	00 0c       	add	r0, r0
 44a:	11 f4       	brne	.+4      	; 0x450 <__fp_round+0xc>
 44c:	88 23       	and	r24, r24
 44e:	52 f0       	brmi	.+20     	; 0x464 <__fp_round+0x20>
 450:	bb 0f       	add	r27, r27
 452:	40 f4       	brcc	.+16     	; 0x464 <__fp_round+0x20>
 454:	bf 2b       	or	r27, r31
 456:	11 f4       	brne	.+4      	; 0x45c <__fp_round+0x18>
 458:	60 ff       	sbrs	r22, 0
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__fp_round+0x20>
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
